#!/bin/bash

declare -r FILE_PATH="/run/user/1000/eww_cpu_graph"
declare -r CPU_PATH="/run/user/1000/eww_cpu"
declare -ri LINES=51

function cpu_graph() {
    # Читаем текущие значения из файлов
    local current_history
    [[ -f "$FILE_PATH" ]] && read -r current_history < "$FILE_PATH"

    # Получаем новое значение CPU
    local new_value
    new_value=$(get_cpus)

    # Обновляем историю
    if [[ -n "$current_history" ]]; then
        # Удаляем самое старое значение и добавляем новое
        current_history="${current_history#*,}"
        current_history+=",$new_value"
    else
        # Инициализация при первом запуске
        current_history="0"
        for ((i=1; i<LINES; i++)); do current_history+=",0"; done
    fi

    # Сохраняем обновленную историю
    echo "$current_history" > "$FILE_PATH"

    # Формируем вывод JSON
    echo "[$current_history]"
}

function get_cpus() {
    local prev_values current_values
    local u u1 t t1

    # Читаем предыдущие значения
    [[ -f "$CPU_PATH" ]] && read -ra prev_values < "$CPU_PATH"

    # Читаем текущие значения из /proc/stat
    read -ra current_values < <(awk '/^cpu / {print $2, $4, $5}' /proc/stat)

    # Вычисляем загрузку CPU
    if [[ -n "${prev_values[*]}" ]]; then
        u1=$((prev_values[0] + prev_values[1]))
        t1=$((u1 + prev_values[2]))

        u=$((current_values[0] + current_values[1]))
        t=$((u + current_values[2]))

        # Вычисляем процент загрузки
        if (( t - t1 > 0 )); then
            printf "%d" $(( (u - u1) * 100 / (t - t1) ))
        else
            printf "0"
        fi
    else
        printf "0"
    fi

    # Сохраняем текущие значения для следующего вызова
    printf "%s\n" "${current_values[*]}" > "$CPU_PATH"
}

# Главный вызов
cpu_graph