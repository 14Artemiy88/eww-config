#!/bin/bash

declare -r IMG_PATH="/run/user/1000/eww_player"
declare -r IMG_SUFFIX=".png"
declare -r DEFAULT_IMG="images/1px.png"
declare -r DEFAULT_TEXT="no image"
declare -r DEFAULT_LENGTH=1
declare -r DEFAULT_POSITION=0
declare -r DEFAULT_TIMELEFT=" "
declare -r DEFAULT_TITLE_CLASS="default"

declare -A icons=(
    ["Playing"]="ÔÅå"
    ["playing"]="ÔÅå"
    ["Paused"]="ÔÅã"
    ["paused"]="ÔÅã"
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–∫–∏
declare -A cover_cache  # –ö—ç—à –ø—É—Ç–µ–π –∫ –æ–±–ª–æ–∂–∫–∞–º

find_cover() {
    local album_dir="$1"

    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
    local -a candidates=(
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        "$album_dir/cover.jpg" "$album_dir/folder.jpg" "$album_dir/artwork.jpg" "$album_dir/front.jpg"
        "$album_dir/cover.png" "$album_dir/folder.png" "$album_dir/artwork.png" "$album_dir/front.png"
        "$album_dir/cover.jpeg" "$album_dir/folder.jpeg" "$album_dir/artwork.jpeg" "$album_dir/front.jpeg"

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä—ã
        "$album_dir/Cover.jpg" "$album_dir/Folder.jpg" "$album_dir/Artwork.jpg" "$album_dir/Front.jpg"
        "$album_dir/AlbumArt.jpg" "$album_dir/Album.jpg" "$album_dir/Image.jpg"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ü–∏–∫–ª–æ–≤
    for art in "${candidates[@]}"; do
        [[ -f "$art" ]] && { echo "$art"; return 0; }
    done

    # –£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    find "$album_dir" -maxdepth 2 -type f \( \
        -iname "*cover*.jp*" -o \
        -iname "*cover*.png" -o \
        -iname "*folder*.jp*" -o \
        -iname "*folder*.png" -o \
        -iname "*artwork*.jp*" -o \
        -iname "*artwork*.png" -o \
        -iname "*front*.jp*" -o \
        -iname "*front*.png" \) \
        -print -quit
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
get_album_img() {
    local file="$1"
    local album_dir="${file%/*}"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if [[ -v cover_cache["$album_dir"] ]]; then
        echo "${cover_cache["$album_dir"]}"
        return
    fi

    # –î–ª—è –Ω–µ–ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ - –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞
    if [[ ! -f "$file" ]]; then
        cover_cache["$album_dir"]="$DEFAULT_IMG"
        echo "$DEFAULT_IMG"
        return
    fi

    # –ò—â–µ–º –æ–±–ª–æ–∂–∫—É
    local art
    art=$(find_cover "$album_dir")

    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if [[ -f "$art" ]]; then
        cover_cache["$album_dir"]="$art"
        echo "$art"
    else
        cover_cache["$album_dir"]="$DEFAULT_IMG"
        echo "$DEFAULT_IMG"
    fi
}

#copy and resize image to destination
ffmpeg -loglevel 0 -y -i "$art" -vf "scale=$COVER_SIZE:-1" "$COVER"


# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
[[ ! -d "$IMG_PATH" ]] && mkdir -p "$IMG_PATH"

is_youtube_video() {
    local url title

    url=$(playerctl -p plasma-browser-integration metadata -f '{{xesam:url}}' 2>/dev/null)
    title=$(playerctl -p plasma-browser-integration metadata -f '{{xesam:title}}' 2>/dev/null)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL
    [[ "$url" == *"youtube.com/"* ]] && return 0
    [[ "$url" == *"youtu.be/"* ]] && return 0
    [[ "$url" == *"googlevideo.com/"* ]] && return 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–µ–µ—Ä–æ–≤)
    [[ "$title" == *"YouTube"* ]] && return 0
    [[ "$title" == *"- YouTube" ]] && return 0

    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
get_image() {
    local img_url="$1"

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ URL –ø—É—Å—Ç–æ–π
    if [[ -z "$img_url" ]]; then
        img_url=$(playerctl metadata -f '{{ mpris:artUrl }}' 2>/dev/null)
        [[ -z "$img_url" ]] && { echo "$DEFAULT_IMG"; return; }
        echo "${img_url#file://}"
        return
    fi

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    local filename="${img_url##*/}"
    local image_path="$IMG_PATH/${filename%.*}$IMG_SUFFIX"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ ! -f "$image_path" ]]; then
        curl -s -o "$image_path" "$img_url" 2>/dev/null
        mogrify -format png "$image_path" 2>/dev/null
    fi

    echo "$image_path"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
timeFormat() {
    local milliseconds=$1
    local seconds=$((milliseconds / 1000))
    printf "%02d:%02d:%02d\n" $((seconds / 3600)) $(((seconds % 3600) / 60)) $((seconds % 60))
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Mopidy
get_mopidy_player_metadata() {
    local status_json rpc_data current trackTime current_album current_album_date current_artist current_length current_title
    local format_album time_left cls

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    status_json=$(curl -s -H 'Content-Type: application/json' -d '{"jsonrpc": "2.0", "id": 1, "method": "core.playback.get_state"}' http://localhost:6680/mopidy/rpc)
    [[ "$status_json" != *'"result":"playing"'* ]] && return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    rpc_data=$(curl -s -H 'Content-Type: application/json' -d '[
        {"jsonrpc": "2.0", "id": 1, "method": "core.playback.get_current_tl_track"},
        {"jsonrpc": "2.0", "id": 2, "method": "core.playback.get_time_position"}
    ]' http://localhost:6680/mopidy/rpc)

    current=$(jq -r '.[0].result' <<< "$rpc_data")
    trackTime=$(jq -r '.[1].result' <<< "$rpc_data")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    current_album=$(jq -r '.track.album.name' <<< "$current")
    current_album_date=$(jq -r '.track.album.date' <<< "$current")
    current_artist=$(jq -r '.track.artists[0].name' <<< "$current")
    current_length=$(jq -r '.track.length' <<< "$current")
    current_title=$(jq -r '.track.name' <<< "$current")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
    format_album="$current_album_date"
    [[ -n "$current_album" ]] && format_album+=" - $current_album"
    [[ "$current_album_date" == "null" && "$current_album" == "null" ]] && format_album=""
    [[ "$current_artist" == "null" ]] && current_artist="music"

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    time_left=$(timeFormat $((current_length - trackTime)))
    time_left=${time_left##00:}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    cls=$DEFAULT_TITLE_CLASS
    [[ ${#current_title} -gt 10 ]] && cls="more_ten"

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
    get_json "$current_title" "$format_album" "$time_left" "$trackTime" "$current_length" "${icons[playing]}" "/run/user/1000/album_cover.png" "$current_artist" "mopidy" "$cls"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö MPV
get_mpv_player_metadata() {
    local mpvsocket mpv_data title position duration path remaining timeleft
    mpvsocket="/run/user/1000/mpvsocket"
    [[ ! -S "$mpvsocket" ]] && return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    mpv_data=$(socat - "$mpvsocket" <<< $'{"command": ["get_property_string", "media-title"], "request_id": 1}\n{"command": ["get_property", "time-pos"], "request_id": 2}\n{"command": ["get_property", "duration"], "request_id": 3}\n{"command": ["get_property", "path"], "request_id": 4}')

    title=$(jq -r 'select(.request_id == 1) | .data' <<< "$mpv_data")
    position=$(jq -r 'select(.request_id == 2) | .data' <<< "$mpv_data")
    duration=$(jq -r 'select(.request_id == 3) | .data' <<< "$mpv_data")
    path=$(jq -r 'select(.request_id == 4) | .data' <<< "$mpv_data")

    [[ -z "$position" || "$position" == "null" ]] && return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    remaining=$(awk -v d="$duration" -v p="$position" 'BEGIN {printf "%.0f", d - p}')
    timeleft=$(date -u -d @"$remaining" +'%H:%M:%S')
    timeleft=${timeleft##00:}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    local image_path="$IMG_PATH/${title}${IMG_SUFFIX}"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [[ ! -f "$image_path" ]]; then
        ffmpeg -ss "$position" -i "$path" -vframes 1 -y "$image_path" 2>/dev/null
    fi
    [[ -f "$image_path" ]] || image_path="$DEFAULT_IMG"

    get_json "$title" "" "$timeleft" "$position" "$duration" "" "$image_path" "$DEFAULT_TEXT" "mpv" "$DEFAULT_TITLE_CLASS"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ playerctl
get_player_metadata() {
    local image="$DEFAULT_IMG"
    local service="$DEFAULT_TEXT"
    local s="üí©" # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    local params="{{ title }}${s}{{ artist }}${s}{{ position }}${s}{{ mpris:length }}${s}-{{ duration(mpris:length - position) }}${s}{{ mpris:artUrl }}"
    local players=("org.telegram.desktop" "plasma-browser-integration")
    local metadata status title artist position len timeleft img

    for player in "${players[@]}"; do
        status=$(playerctl -p "$player" status 2>/dev/null)
        [[ "$status" != "Playing" && "$player" == "org.telegram.desktop" ]] && continue

        metadata=$(playerctl -p "$player" metadata -f "$params" 2>/dev/null)
        [[ -n "$metadata" ]] && break
    done
    [[ -z "$metadata" ]] && return

    IFS="$s" read -r title artist position len timeleft img <<< "$metadata"

    case "$title" in
        *"–ö–∏–Ω–æ–ø–æ–∏—Å–∫"*) service="kinopoisk"; title=${title/" ‚Äî —Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ ‚Äî –ö–∏–Ω–æ–ø–æ–∏—Å–∫"/} ;;
        *"Twitch"*)    service="twitch";    title=${title/" - Twitch"/} ;;
        *"VK"*)        service="vk";        title=${title/"VK –í–∏–¥–µ–æ ‚Äî —Å–º–æ—Ç—Ä—£—Ç—å –±–µ–∑–ø–ª–∞—Ç–Ω–æ"/} ;;
        *"–¢–µ–ª–µ–º–æ—Å—Ç"*)  get_json "" "" "$DEFAULT_TIMELEFT" "$DEFAULT_POSITION" "$DEFAULT_LENGTH" "" "$DEFAULT_IMG" "telemost" "$player" "$DEFAULT_TITLE_CLASS"; return ;;
    esac

    if is_youtube_video; then
        service="youtube";
    else
        image=$(get_image "$img")
    fi

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
    title=${title//\\/|}
    title=${title//\"/\\\"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
    if [[ -n "$position" ]]; then
        get_json "$title" "$artist" "$timeleft" "$position" "$len" "${icons[$status]}" "$image" "$service" "$player" "$DEFAULT_TITLE_CLASS"
    else
        get_json "$title" "" "$DEFAULT_TIMELEFT" "$DEFAULT_POSITION" "$DEFAULT_LENGTH" "" "$image" "$service" "$player" "$DEFAULT_TITLE_CLASS"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö DeadBeeF
get_deadbeef_player_metadata() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ DeadBeeF
    if ! pgrep -x deadbeef-main >/dev/null; then
        return
    fi

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    local status="Playing"
    [[ $(deadbeef --nowplaying-tf "%ispaused%") == "1" ]] && status="Paused"

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
    local title
    title=$(deadbeef --nowplaying "%t" 2>/dev/null)

    if [[ "$title" == "nothing" ]]; then
      return
    fi

    local artist duration position timeleft file_path image_path
    artist=$(deadbeef --nowplaying "%a" 2>/dev/null)
    duration=$(deadbeef --nowplaying-tf "%length_seconds%" 2>/dev/null)
    position=$(deadbeef --nowplaying-tf "%playback_time_seconds%" 2>/dev/null)
    timeleft=$(deadbeef --nowplaying-tf "-%playback_time_remaining%" 2>/dev/null)
    file_path=$(deadbeef --nowplaying-tf "%path%" 2>/dev/null)

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ–±–ª–æ–∂–∫—É
    if [[ -f "$file_path" ]]; then
        image_path=$(get_album_img "$file_path")
    fi

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
    pos_ms=$(awk "BEGIN {printf \"%.0f\", $position * 1000}")
    dur_ms=$(awk "BEGIN {printf \"%.0f\", $duration * 1000}")
    get_json "$title" "$artist" "$timeleft" "$pos_ms" "$dur_ms" "${icons[$status]}" "$image_path" "$artist" "deadbeef" "$DEFAULT_TITLE_CLASS"
}

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON
get_json() {
    local position_percent=0
    [[ $5 -ne 0 ]] && position_percent=$(($4 * 100 / $5))

    cat <<EOF
{
  "title": "$1",
  "artist": "$2",
  "timeleft": "$3",
  "position": "$position_percent",
  "status": "$6",
  "image": "$7",
  "text": "$8",
  "player": "$9",
  "title_class": "${10}"
}
EOF
    exit 0
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
#get_mopidy_player_metadata
get_deadbeef_player_metadata
get_mpv_player_metadata
get_player_metadata

# –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç
get_json "" "" "$DEFAULT_TIMELEFT" "$DEFAULT_POSITION" "$DEFAULT_LENGTH" "" "$DEFAULT_IMG" "silence" "" "$DEFAULT_TITLE_CLASS"
